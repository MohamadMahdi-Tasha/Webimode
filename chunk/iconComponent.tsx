// Importing part
import {ReactNode} from "react";

// Defining type of props
interface propsType {
    name: 'chevron-down'|'chevron-left'|'list';
    size: number;
}

// Creating and exporting icon component as default
export default function IconComponent({size, name}:propsType):ReactNode {
    // Conditional rendering
    if (name === 'chevron-down') {
        return (
            <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 15 14">
                <path d="M0.540583 3.9846C0.540139 4.06137 0.554854 4.13748 0.583882 4.20855C0.612912 4.27962 0.655685 4.34426 0.70975 4.39877L5.47558 9.1646C5.74652 9.43622 6.06837 9.65172 6.42272 9.79876C6.77707 9.9458 7.15694 10.0215 7.54058 10.0215C7.92422 10.0215 8.3041 9.9458 8.65844 9.79876C9.01279 9.65172 9.33465 9.43622 9.60558 9.1646L14.3714 4.39877C14.4258 4.34438 14.4689 4.27981 14.4984 4.20875C14.5278 4.13769 14.543 4.06152 14.543 3.9846C14.543 3.90769 14.5278 3.83152 14.4984 3.76046C14.4689 3.6894 14.4258 3.62483 14.3714 3.57044C14.317 3.51605 14.2525 3.4729 14.1814 3.44347C14.1103 3.41403 14.0342 3.39888 13.9572 3.39888C13.8803 3.39888 13.8042 3.41403 13.7331 3.44347C13.662 3.4729 13.5975 3.51605 13.5431 3.57044L8.77725 8.33627C8.44912 8.66399 8.00433 8.84806 7.54058 8.84806C7.07683 8.84806 6.63204 8.66399 6.30392 8.33627L1.53808 3.57044C1.48385 3.51576 1.41934 3.47237 1.34825 3.44275C1.27717 3.41314 1.20092 3.39789 1.12392 3.39789C1.04691 3.39789 0.970664 3.41314 0.899579 3.44275C0.828495 3.47237 0.763978 3.51576 0.70975 3.57044C0.655686 3.62494 0.612912 3.68959 0.583882 3.76066C0.554854 3.83173 0.540139 3.90783 0.540583 3.9846Z" fill={'currentColor'} />
            </svg>
        );
    } else if (name === 'chevron-left') {
        return (
            <svg width={size} height={size} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M11.4462 15.9998C11.3584 16.0003 11.2715 15.9835 11.1902 15.9503C11.109 15.9171 11.0351 15.8683 10.9728 15.8065L5.52617 10.3598C5.21575 10.0502 4.96946 9.68232 4.80142 9.27736C4.63337 8.87239 4.54687 8.43825 4.54688 7.9998C4.54688 7.56135 4.63337 7.12721 4.80142 6.72224C4.96946 6.31727 5.21575 5.94944 5.52617 5.6398L10.9728 0.193131C11.035 0.130972 11.1088 0.0816652 11.19 0.0480249C11.2712 0.0143847 11.3583 -0.00292969 11.4462 -0.00292969C11.5341 -0.00292969 11.6211 0.0143847 11.7023 0.0480249C11.7835 0.0816652 11.8573 0.130972 11.9195 0.193131C11.9817 0.25529 12.031 0.329084 12.0646 0.410299C12.0982 0.491513 12.1156 0.578559 12.1156 0.666465C12.1156 0.754371 12.0982 0.841416 12.0646 0.922631C12.031 1.00385 11.9817 1.07764 11.9195 1.1398L6.47283 6.58646C6.0983 6.96147 5.88793 7.4698 5.88793 7.9998C5.88793 8.5298 6.0983 9.03813 6.47283 9.41313L11.9195 14.8598C11.982 14.9218 12.0316 14.9955 12.0654 15.0767C12.0993 15.158 12.1167 15.2451 12.1167 15.3331C12.1167 15.4211 12.0993 15.5083 12.0654 15.5895C12.0316 15.6708 11.982 15.7445 11.9195 15.8065C11.8572 15.8683 11.7833 15.9171 11.7021 15.9503C11.6209 15.9835 11.5339 16.0003 11.4462 15.9998Z" fill={'currentColor'} />
            </svg>
        );
    } else if (name === 'list') {
        return (
            <svg width={size} height={size} viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M28 3.49967C28 4.14134 27.475 4.66634 26.8333 4.66634H1.16667C0.525 4.66634 0 4.14134 0 3.49967C0 2.85801 0.525 2.33301 1.16667 2.33301H26.8333C27.475 2.33301 28 2.85801 28 3.49967ZM8.16667 23.333H1.16667C0.525 23.333 0 23.858 0 24.4997C0 25.1413 0.525 25.6663 1.16667 25.6663H8.16667C8.80833 25.6663 9.33333 25.1413 9.33333 24.4997C9.33333 23.858 8.80833 23.333 8.16667 23.333ZM17.5 12.833H1.16667C0.525 12.833 0 13.358 0 13.9997C0 14.6413 0.525 15.1663 1.16667 15.1663H17.5C18.1417 15.1663 18.6667 14.6413 18.6667 13.9997C18.6667 13.358 18.1417 12.833 17.5 12.833Z" fill="currentColor"/>
            </svg>
        );
    }
}